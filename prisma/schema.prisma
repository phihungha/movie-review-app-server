// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  username    String       @unique
  avatarUrl   String?
  email       String       @unique
  name        String
  userType    UserType
  gender      Gender?
  dateOfBirth DateTime?
  criticUser  CriticUser?
  regularUser RegularUser?

  reviews          Review[]     @relation(name: "review-author")
  reviewThanks     Review[]     @relation(name: "review-thank")
  comments         Comment[]    @relation(name: "comment-author")
  viewedMovies     Movie[]
  collections      Collection[] @relation(name: "collection-author")
  likedCollections Collection[] @relation(name: "collection-like")
}

enum UserType {
  Regular
  Critic
}

enum Gender {
  Male
  Female
  Other
}

model RegularUser {
  user User   @relation(fields: [id], references: [id])
  id   String @id
}

model CriticUser {
  user    User   @relation(fields: [id], references: [id])
  id      String @id
  blogUrl String
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[]
}

model Company {
  id                Int     @id @default(autoincrement())
  name              String  @unique
  producedMovies    Movie[] @relation(name: "production-company")
  distributedMovies Movie[] @relation(name: "distribution-company")
}

model CrewMember {
  id             Int            @id @default(autoincrement())
  name           String
  avatarUrl      String?
  workedOnMovies WorkCredit[]
  actedMovies    ActingCredit[]
}

model WorkCredit {
  crew    CrewMember   @relation(fields: [crewId], references: [id])
  crewId  Int
  movie   Movie        @relation(fields: [movieId], references: [id])
  movieId Int
  role    CrewWorkRole

  @@id([crewId, movieId, role])
}

enum CrewWorkRole {
  Director
  Writer
  DoP
  Composer
  Editor
}

model ActingCredit {
  crew          CrewMember @relation(fields: [crewId], references: [id])
  crewId        Int
  movie         Movie      @relation(fields: [movieId], references: [id])
  movieId       Int
  characterName String

  @@id([crewId, movieId, characterName])
}

model Movie {
  id                    Int       @id @default(autoincrement())
  title                 String
  posterUrl             String?
  releaseDate           DateTime
  runningTime           Int
  synopsis              String?
  genres                Genre[]
  productionCompanies   Company[] @relation(name: "production-company")
  distributionCompanies Company[] @relation(name: "distribution-company")

  workCredits   WorkCredit[]
  actingCredits ActingCredit[]

  reviews            Review[]
  regularScore       Float?
  regularReviewCount Int          @default(0)
  criticScore        Float?
  criticReviewCount  Int          @default(0)
  viewedUsers        User[]
  viewedUserCount    Int          @default(0)
  collections        Collection[]
}

model Review {
  id         Int      @id @default(autoincrement())
  author     User     @relation(name: "review-author", fields: [authorId], references: [id])
  authorId   String
  authorType UserType
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int

  title          String
  postTime       DateTime  @default(now())
  lastUpdateTime DateTime?
  score          Int
  content        String
  externalUrl    String?

  thankUsers   User[]    @relation(name: "review-thank")
  thankCount   Int       @default(0)
  comments     Comment[] @relation
  commentCount Int       @default(0)
}

model Comment {
  id       Int    @id @default(autoincrement())
  author   User   @relation(name: "comment-author", fields: [authorId], references: [id])
  authorId String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId Int

  postTime       DateTime  @default(now())
  lastUpdateTime DateTime?
  isRemoved      Boolean   @default(false)
  content        String
}

model Collection {
  id       Int    @id @default(autoincrement())
  author   User   @relation(name: "collection-author", fields: [authorId], references: [id])
  authorId String

  name           String
  creationTime   DateTime  @default(now())
  lastUpdateTime DateTime?

  movies Movie[]

  likeUsers User[] @relation(name: "collection-like")
  likeCount Int    @default(0)
}
